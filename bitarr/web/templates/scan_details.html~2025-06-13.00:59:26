{% extends 'layout.html' %}

{% block title %}Bitarr - Scan Results{% endblock %}

{% block content %}
<div class="container">
    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">Scan Results</h1>
        <h2 class="scan-name">
            {% if scan.name %}
                {{ scan.name }}
            {% else %}
                Scan of {{ scan.top_level_path|truncate(40) }}
            {% endif %}
        </h2>

        <div class="scan-overview">
            <!-- Scan Details -->
            <div class="scan-details">
                <h3 class="section-title">Scan Details</h3>
                <table class="detail-table">
                    <tr>
                        <td>Date:</td>
                        <td>{{ scan.start_time|strftime('%Y-%m-%d %H:%M:%S') }}</td>
                    </tr>
                    <tr>
                        <td>Host:</td>
                        <td>{{ scan.host_display_name }}</td>
                    </tr>
                    <tr>
                        <td>Storage Device:</td>
                        <td>
                            {% if summary.storage_devices %}
                                {{ summary.storage_devices[0].name }}
                            {% else %}
                                Unknown
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <td>Scan Path:</td>
                        <td>{{ scan.top_level_path }}</td>
                    </tr>
                    <tr>
                        <td>Files Scanned:</td>
                        <td>{{ (scan.files_scanned if scan.files_scanned > 0 else scan.files_unchanged + scan.files_modified + scan.files_corrupted + scan.files_new)|thousands_separator }}</td>
                    </tr>
                    <tr>
                        <td>Total Size:</td>
                        <td>
                            {% if scan.total_size and scan.total_size > 0 %}
                                {{ scan.total_size|format_size }}
                            {% else %}
                                Unknown
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <td>Duration:</td>
                        <td>
                            {% set duration = scan.start_time|duration_seconds(scan.end_time) %}
                            {% if duration %}
                                {{ duration|round(1) }}s
                            {% else %}
                                Unknown
                            {% endif %}
                        </td>
                    </tr>
                    <tr>
                        <td>Checksum method used:</td>
                        <td>{{ scan.checksum_method|upper }}</td>
                    </tr>
                </table>
            </div>

            <!-- Scan Summary -->
            <div class="scan-summary">
                <h3 class="section-title">Scan Results Summary</h3>
                <table class="summary-table">
                    <tr>
                        <td>Total Files:</td>
                        <td>{{ (scan.files_scanned if scan.files_scanned > 0 else scan.files_unchanged + scan.files_modified + scan.files_corrupted + scan.files_new)|thousands_separator }}</td>
                    </tr>
                    <tr class="clickable-row" onclick="showCategory('new')">
                        <td>New Files:</td>
                        <td class="{% if scan.files_new > 0 %}result-normal{% endif %}">{{ scan.files_new|thousands_separator }}</td>
                    </tr>
                    <tr class="clickable-row" onclick="showCategory('unchanged')">
                        <td>Unchanged:</td>
                        <td class="{% if scan.files_unchanged > 0 %}result-normal{% endif %}">{{ scan.files_unchanged|thousands_separator }}</td>
                    </tr>
                    <tr class="clickable-row" onclick="showCategory('modified')">
                        <td>Modified:</td>
                        <td class="{% if scan.files_modified > 0 %}result-warning{% endif %}">{{ scan.files_modified|thousands_separator }}</td>
                    </tr>
                    <tr class="clickable-row" onclick="showCategory('corrupted')">
                        <td>Corrupted:</td>
                        <td class="{% if scan.files_corrupted > 0 %}result-critical{% endif %}">{{ scan.files_corrupted|thousands_separator }}</td>
                    </tr>
                    <tr class="clickable-row" onclick="showCategory('permission')">
                        <td>Permission Denied:</td>
                        <td class="{% if summary.permission_errors > 0 %}result-warning{% endif %}">{{ summary.permission_errors|default(0)|thousands_separator }}</td>
                    </tr>
                    <tr class="clickable-row" onclick="showCategory('io-errors')">
                        <td>I/O Errors:</td>
                        <td class="{% if summary.io_errors > 0 %}result-critical{% endif %}">{{ summary.io_errors|default(0)|thousands_separator }}</td>
                    </tr>
                    <tr class="clickable-row" onclick="showCategory('missing')">
                        <td>Missing:</td>
                        <td class="{% if scan.files_missing > 0 %}result-warning{% endif %}">{{ scan.files_missing|thousands_separator }}</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <!-- Issues Requiring Attention -->
    {% set total_issues = scan.files_corrupted + scan.files_missing + summary.error_count %}
    {% if total_issues > 0 %}
    <div class="issues-section">
        <h3 class="section-title">Issues Requiring Attention ({{ total_issues }})</h3>
        <p style="margin-bottom: 15px; color: #7f8c8d; font-size: 0.9em;">
            Files that could not be scanned or have potential integrity issues.
        </p>

        <table class="issues-table">
            <thead>
                <tr>
                    <th style="width: 40%;">File Path</th>
                    <th style="width: 15%;">Issue Type</th>
                    <th style="width: 10%;">Size</th>
                    <th style="width: 15%;">Last Seen</th>
                    <th style="width: 20%;">Error Details</th>
                </tr>
            </thead>
            <tbody>
                {% for error in errors %}
                <tr onclick="showFileDetails('{{ error.file_path }}')">
                    <td class="file-path">{{ error.file_path }}</td>
                    <td>
                        <span class="issue-type {% if error.error_type == 'checksum_error' %}io-error{% elif error.error_type == 'processing_error' %}permission{% else %}{{ error.error_type }}{% endif %}">
                            {% if error.error_type == 'checksum_error' %}
                                I/O Error
                            {% elif error.error_type == 'processing_error' %}
                                Permission
                            {% else %}
                                {{ error.error_type|title }}
                            {% endif %}
                        </span>
                    </td>
                    <td>Unknown</td>
                    <td>{{ error.timestamp|strftime('%Y-%m-%d %H:%M') if error.timestamp else 'Unknown' }}</td>
                    <td class="error-message">{{ error.error_message|truncate(80) }}</td>
                </tr>
                {% endfor %}

                <!-- TODO: Add corrupted files here -->
                <!-- TODO: Add missing files here -->
            </tbody>
        </table>
    </div>
    {% endif %}

    <!-- Actions -->
    <div class="actions">
        <button class="btn" onclick="history.back()">← Back to History</button>
        <button class="btn primary rescan-btn" data-path="{{ scan.top_level_path }}">Rescan Path</button>
        {% if total_issues > 0 %}
            <button class="btn" onclick="runDiagnostics()">Storage Diagnostics</button>
        {% endif %}
        <button class="btn" onclick="exportReport()">Export Report</button>
    </div>

    <!-- All Files (Collapsible) -->
    <div class="collapsible" id="allFiles">
        <div class="collapsible-header" onclick="toggleCollapsible('allFiles')">
            <span>Complete File List ({{ (scan.files_scanned if scan.files_scanned > 0 else scan.files_unchanged + scan.files_modified + scan.files_corrupted + scan.files_new)|thousands_separator }} files)</span>
            <span class="toggle-icon">▼</span>
        </div>
        <div class="collapsible-content">
            <div style="margin-bottom: 15px; color: #7f8c8d; font-size: 0.9em;">
                Individual file listing feature coming soon. Will include pagination, filtering, and detailed file status.
            </div>

            <!-- Placeholder for file listing -->
            <div style="text-align: center; padding: 40px; background: #f8f9fa; border-radius: 4px;">
                <h4 style="margin-bottom: 10px;">File Listing Implementation Needed</h4>
                <p style="color: #7f8c8d;">This section will show paginated file results with:</p>
                <ul style="text-align: left; max-width: 400px; margin: 15px auto; color: #7f8c8d;">
                    <li>Individual file status and checksums</li>
                    <li>Sortable columns</li>
                    <li>Search and filtering</li>
                    <li>Pagination for large file sets</li>
                    <li>Click-to-drill-down functionality</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<style>
/* Copy all the CSS from the mockup */
.container {
    max-width: 1200px;
    margin: 0 auto;
}

.page-header {
    background: white;
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.page-title {
    font-size: 1.6em;
    margin-bottom: 5px;
    color: #2c3e50;
}

.scan-name {
    font-size: 1.1em;
    color: #7f8c8d;
    margin-bottom: 20px;
}

.scan-overview {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
}

.scan-details, .scan-summary {
    background: white;
    padding: 20px;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.section-title {
    font-size: 1.1em;
    margin-bottom: 15px;
    color: #2c3e50;
    border-bottom: 1px solid #ecf0f1;
    padding-bottom: 5px;
}

.detail-table, .summary-table {
    width: 100%;
    border-collapse: collapse;
}

.detail-table td, .summary-table td {
    padding: 6px 12px 6px 0;
    border-bottom: 1px solid #f8f9fa;
}

.detail-table td:first-child, .summary-table td:first-child {
    font-weight: 600;
    color: #34495e;
    width: 40%;
}

.detail-table td:last-child, .summary-table td:last-child {
    font-family: 'Courier New', monospace;
    color: #2c3e50;
}

.summary-table td:last-child {
    text-align: right;
    font-weight: 600;
}

.result-critical {
    color: #e74c3c;
}

.result-warning {
    color: #f39c12;
}

.result-normal {
    color: #27ae60;
}

.clickable-row {
    cursor: pointer;
}

.clickable-row:hover {
    background: #f8f9fa;
}

.issues-section {
    background: white;
    padding: 20px;
    margin-top: 20px;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.issues-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

.issues-table th {
    background: #34495e;
    color: white;
    padding: 10px 8px;
    text-align: left;
    font-weight: 600;
    font-size: 0.9em;
}

.issues-table td {
    padding: 8px;
    border-bottom: 1px solid #ecf0f1;
    font-size: 0.9em;
}

.issues-table tr:hover {
    background: #f8f9fa;
    cursor: pointer;
}

.file-path {
    font-family: 'Courier New', monospace;
    color: #2c3e50;
    word-break: break-all;
}

.issue-type {
    padding: 3px 8px;
    border-radius: 3px;
    font-size: 0.8em;
    font-weight: 600;
    text-transform: uppercase;
}

.issue-type.corruption {
    background: #e74c3c;
    color: white;
}

.issue-type.io-error {
    background: #e67e22;
    color: white;
}

.issue-type.permission {
    background: #f39c12;
    color: white;
}

.issue-type.missing {
    background: #9b59b6;
    color: white;
}

.issue-type.modified {
    background: #3498db;
    color: white;
}

.error-message {
    font-family: 'Courier New', monospace;
    font-size: 0.8em;
    color: #7f8c8d;
}

.actions {
    margin-top: 20px;
    padding: 15px 0;
}

.btn {
    padding: 8px 16px;
    margin-right: 10px;
    border: 1px solid #bdc3c7;
    background: white;
    color: #2c3e50;
    border-radius: 3px;
    cursor: pointer;
    font-size: 0.9em;
    text-decoration: none;
    display: inline-block;
}

.btn:hover {
    background: #ecf0f1;
}

.btn.primary {
    background: #3498db;
    color: white;
    border-color: #3498db;
}

.collapsible {
    background: white;
    margin-top: 20px;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.collapsible-header {
    padding: 15px 20px;
    cursor: pointer;
    border-bottom: 1px solid #ecf0f1;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.collapsible-header:hover {
    background: #f8f9fa;
}

.collapsible-content {
    padding: 20px;
    display: none;
}

.collapsible.open .collapsible-content {
    display: block;
}

.toggle-icon {
    transition: transform 0.2s;
}

.collapsible.open .toggle-icon {
    transform: rotate(180deg);
}
</style>
{% endblock %}

{% block scripts %}
<script>
function toggleCollapsible(id) {
    const element = document.getElementById(id);
    element.classList.toggle('open');
}

function showCategory(category) {
    alert(`Filter to show: ${category} files\n\nThis will be implemented to filter the file list.`);
}

function showFileDetails(filePath) {
    alert(`File Details: ${filePath}\n\nThis will show:\n- Scan history\n- Checksum timeline\n- Recovery options`);
}

function runDiagnostics() {
    alert('Storage Diagnostics feature coming soon');
}

function exportReport() {
    alert('Export Report feature coming soon');
}

// Handle rescan buttons
document.addEventListener('DOMContentLoaded', function() {
    const rescanButtons = document.querySelectorAll('.rescan-btn');
    rescanButtons.forEach(button => {
        button.addEventListener('click', function() {
            const path = this.dataset.path;
            alert('Starting new scan for: ' + path);
        });
    });
});
</script>
{% endblock %}
